buildscript
{
    repositories
    {
        jcenter()
        maven { url = "https://maven.minecraftforge.net/" }
    }

    dependencies
    {
        classpath 'net.minecraftforge.gradle:ForgeGradle:3+'
    }
}

apply plugin: 'net.minecraftforge.gradle'

if (project.hasProperty("dev"))
{
    version += "-dev" + dev
}

group = "mchorse.chameleon"
archivesBaseName = "chameleon-cf"

sourceCompatibility = targetCompatibility = '1.8'

compileJava
{
    sourceCompatibility = targetCompatibility = '1.8'
}

minecraft
{
//    version = "1.12.2-14.23.5.2799"
//    runDir = "run"
//    mappings = "snapshot_20171003"

    mappings channel: 'snapshot', version: '20171003-1.12'

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }

        server {

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }
    }

//    replace("%VERSION%", project.version)
//    replace("%MCLIB%", project.mclib)
//    replace("%METAMORPH%", project.metamorph)
}

dependencies
{
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2859'
    compile files("mclib-2.4.3-1.12.2.jar")
    compile files("metamorph-cf-1.5.jar")
}

//processResources
//{
//    inputs.property "version", project.version
//    inputs.property "mcversion", project.minecraft.version
//
//    from(sourceSets.main.resources.srcDirs)
//    {
//        include 'mcmod.info'
//
//        expand 'version':project.version, 'mcversion':project.minecraft.version
//    }
//
//    from(sourceSets.main.resources.srcDirs)
//    {
//        exclude 'mcmod.info'
//    }
//}

//task deobfJar(type: Jar) {
//    from sourceSets.main.output
//    classifier = 'dev'
//}
//
//task sourcesJar(type: Jar) {
//    from sourceSets.main.allJava
//    classifier = 'sources'
//}
//
//artifacts {
//    archives deobfJar
//    archives sourcesJar
//}
